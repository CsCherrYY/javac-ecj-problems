/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javac.ecj.problems;

import com.sun.source.tree.CompilationUnitTree;
import com.sun.tools.javac.api.JavacTaskImpl;

import javax.tools.DocumentationTool;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.util.List;
import java.io.File;
import java.util.ArrayList;

public class App {

    private static String javacTestFile = "AnnotationMember.java";
    private static String javadocTestFile = "Javadoc.java";

    public static void main(String[] args) {
        //javadoc();
        javac();
    }

    private static void javadoc() {
        DocumentationTool documentationTool = ToolProvider.getSystemDocumentationTool();
        var compUnits = documentationTool.getStandardFileManager(null, null, null).getJavaFileObjects(new File(".\\app\\src\\testFiles\\" + javadocTestFile));
        DocumentationTool.DocumentationTask task = documentationTool.getTask(null, null, new JavacDiagnosticsListener(), null, null, compUnits);
        task.call();
    }

    private static void javac() {
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        List<String> OPTIONS = List.of("--release=" + 11, "-Xlint:all"); //$NON-NLS-1$
        // create a compilation task (JavacTask) for the given java source file
        var compUnits = compiler.getStandardFileManager(new JavacDiagnosticsListener(), null, null).getJavaFileObjects(new File(".\\app\\src\\testFiles\\" + javacTestFile));
        // we need to cast to JavacTask so that we can call parse method
        JavacTaskImpl task = (JavacTaskImpl) compiler.getTask(null, null, new JavacDiagnosticsListener(), OPTIONS, null, compUnits);
        task.call();
//        List<CompilationUnitTree> roots = new ArrayList<>();
//        it.forEach(i -> {
//            roots.add(i);
//        });
    }

}
